Introduction.
Request:
	METHOD -get,post,put,patch,delete,options,head
	URI-
	get : https://site.com/wp-json/wp/v2/posts:
			metadata - host , content-type, authorisation,cache-control
			new post - send post request.
		get options - > to find resources and methods.
		options request
	resource and representation:
		any information whihc can be named is a resource.
		conceptual mapping 
		Rest components perform actions on resources to get to know the state.
			get the resource in different representations -- like same resource in json/html/ etc -- representation.
		http methods - verbs.
		reload,forward,back, visit - get http functions.
		GET -- 200 OK or 404 not found.
		send data from client to server - POST, PUT and PATCH.
		POST to create /add new data into collection-- 201 Created or 401 unauthorised, 409 conflict,404 not found.
		PUT -- update and existing singleton resource based on ID.It can create new resource if not exist.
			200 OK or 401 unauthorised, 404 not found,405 method not allowed.
		PATCH -- modify existing resourcecs based on ID.- can carry out modifying resources.
			200 OK or 401 unauthorised, 404 not found,405 method not allowed.
		DELETE -- delete only singleton resource based on ID.
			200 OK or 401 unauthorised, 404 not found
		OPTIONS -- get the options available from resources.
			200 OK.
		HEAD -- get just the head section from the resource.
			200 OK or 404 not found.	
Response:
	Response header:
	all header details are given as o/p.
	HTTP Status messages.
		Response codes:
		1xx -- Information - rarely seen
		2xx -- Success 
			200 - OK
			201 - sucess and new data got craeted in a collection.
			202 - Accepted.
			204 - No content.- server processed reuqest but returend no content.
		3xx -- Redirection
			301 -- moved permanently
			302/303 -- Found at this other URL-- moved temporarly.
			307 -- Temporary redirect
			308 -- Resume incomplete - permanent redirect.
		4xx -- Client err
			400 -- Bad request
			401 -- Unauthorised-- Authentication is required.
			403 -- Forbidden-- incorrect permission.
			404 -- Not found-- doesn't exist.
			405 -- method not allowed -- gets when u use post for get methods.
		5xx -- Server err
			500 -- Internal server err
			502 -- Bad gateway - invalid response
			503 -- Service unavailable - when server is unavailable / overloaded.
			https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
	Rest and Authentication/Authorization:
		need to pass Authorisation along with header only
		
Request/Response pairs:
	 1st step is discovery - use OPTIONS gives all options present.
	GET request.
	POST request.
	PUT/PATCH request.
	DELETE request. - remove a resources.--forcec deletion is also possible.(force=true)
======================================================================================================================================
HTTP ESSENTIAL TRAINING:
	1.HTTP-hypertext transfer protocol:
		protocol - definitions/rules to transfer data back and forth.
		hypertext- hyper links 
		- plain language and human readable.
			GET,POST,PUT,DELETE,CONNECT,HEAD.
		- Stateless protocol.
			http has no memory of previous request.
		- Sessions.
			stored states shared between server and browser.
			use cookies to send back and froth the state whcih user was in earlier.
		- HTTP Headers.
			what type od client sent the request.
			server configuration.
			time and date of response.
			duration od storage.
			data format.
			cookies used to track cookies.
		- Request/Response pairs.
		HTTPs and HTTP2:
			http2 - relatively new.
			http - fallback protocol.
			difference:
			1. http2 - secure and faster - uses compresion algm , allows multiplexing , requires encrypted connections between server and browser -HTTPs.
			2. http1.1 - uncompressed headers, tranfers one fle at a time, no default encryption.	
		Terminology:
			Browser - appn used to access and navigate b/w HTML docs.
			user - agent - acting behalf of teh user - browser but not limited to browser.
			TCP - transfer control protocol, main internet protocols used by WWW,email , FTP and remote administartion.
			IP - internet protocol , used to transfer data b/w computers over a network 
			URL - Uniform resorce locator - address pointing at resource on to a web.
			DNS - domain name server - catalogs all domain name URLs and points them to IP addresses of servers.
			Resource - files availale on server.
			Server - computer in internet- share information-data storage.
			Proxy - It is a softwarer /hardware service acting as a midle person b/w clients and servers. - used when server IP needs to be hiden / firewall n/w problem.
			Request-Response Pairs - request sent and response returend.- communication over HTTP.
			Headers - HTTP headers to pass information.
			HTTP request Method - GET, PUT,POST.
			Server Response code - response from server.
			Cache - method of storing data on the client or server to speed up performance/transfers.
			cookies - small information - to maitain states.
			Sessions- clients and servers can sahre information about states by passing information back and forth, creating a session.
		HTTP flow:
			TCP connection.
			request methods.
			response after performing actions.
			TCP connection will be closed.

			multiplexing and server push: multiple connections through single sessions.
		Tools to see http actions.
			1. inspect Tools.
			2. Postman.
			3. insomnia.rest
			4. visual studio rest client extension.
	2. Request and Response pairs
		-a request will have response.
		Anatomy of a URL:
			Universal Resource Locator.
				ex..https://linkedin.learning. --> URN+HTTP protocol.
				URN - hostname+connection port(80http/443-https)+resource path(index.htm/default.htm..etc.,)
			optional URL query --> added at end ..eg: ?id=2
		HTTP methods:
			-same notes as mentioned above(head,options,trace,put,post,get,delete,patch)
	3. HTTP headers
		- human readable.
		- Authorisation basic - usr/pass -- base64 encoded.
			caching files should be done on browsers.- header chaching.
		- Host 
		- Content-Type:
		- connection: keep-alive
		How to see HTTP headers ? dveloper tools.
		REST - reprsentational sate tranfers.
		Anatomy of request headers:
			Method - URL.
			Host:
			User-Agent - web browser.
			Accept- language:
			Accept- encoding:
			Referer:
			Connection:
			Cache-control:
			the above are some options of http request header.
		Anatomy of response header.
			server : hosted 
			date / time:
			content-type:
		cookies:
			server is the one which gives cookies to the web browsers.
			browsers stores cookies.
			cookie will be inclused in header as well.
		Caching:
			Stores scripts / data on browser instead of asking servers.
			Caching can be utilised using Cache Request Directives and Cache response Directives.
			Cache Request Directives:
				Cache-control:
					max-age=<seconds>
					max-state[=<sec>]
					min-fresh=<sec>
					no-cache
					no-store
					no-transform
					only-if-cached
			Cache Response Directives:
				Cache-control:
				must-revalidate:
				no-cache
				no-store
				no-transform
				public
				private
				proxy-revalidate
				max-age=<sec>
				s-maxage=<sec>
			max-age-- store files for these many seconds.
				Cache-Control:max-age:31536000
			we can't cache certain files as well
======================================================================================================================================
DESIGNING RESTFUL APIs
	API design:
		Decide on functionality to expose
		decide how to expose It
		decide best ways to expose it.
		Test and validate assumptions
		Repeat.
		challenges:
			naming , interacte and evolve of goals of API.
	
	AFFORDANCES: something which allows you to perform an action or accomplish a goal.
			eg- switch -On /OFF lights.
			
	3 approches to adding and API:
		- Bolt-On strategy: for existing systems. brute force approach.
			Drawbacks:
			previous architecture faults will be carried out.
		- Greenfield startegy: For new systems
			Benifits:
			Generally API first or mobile first mindset.
			take advantage of technologies not known before.
			Drawbacks:
			Often requires massive upfront investment before any benifits appear.
		- Facade Strategy: For replacing ssytem peice by peice
			Benifits:
			Ideal for legacy systems as application is always functional .
			Drawbacks:
			Can be challenging to have "multiple mindsets" in the system
			Can be hard to replicate behaviour for a full 1:1 conversion.
	Tips for modeling APIs:
		Don't worry about the tools.
		Have a consistent process.
		It doesn't count unless its written down- document everything.
	the modelling Process.
		-Identifying Participants: human/ bot / entity. who are our participants ? what do we need to know?
			be careful about the system boundries.
		-Identifying activities and brerking down into steps:
			what are our steps? - should not be abstract at all.
		-Indentifying participants and activities - don not guess---just documenat in every stage.
			who are out participants?
			what are the activities?
			what are our steps?
		-Creating and grouping API methods:
			resources -- nouns.
			mapping activities to verbs and actions.
				get, put,del and post CURD operations.
			Relationships types:
				independent resources
				dependent resources
				Associative -- actors in film is an eg , same character -- different ppl enact if history about a aperson.
		- Validating API:
			cheaper and faster.
			use a microfrsmework -- hapi.js etc..
			write documentation.-- acts as if API already existed.
				List end points - describe what they do ?
				List the parameters - describe what they mean ?
				List the response codes - describe when you get each response.
				Show the response payload.
				show the documentation to other team ..can include curl command as well.
				eg: google doc or swagger..
				GOAL -- documentation to get the feedback from others and this is not the last step of the project.
	HTTP-- hw does your API work ?
		core misunderstanding 
			HTTP is a protocol.
			XML is a markup language. -- XML standards can add structure.
			JSON is a notation. -- JSON specifications can add context.
			REST is none of the above ..XD
		What is REST ?
			Generally agreed-upon set of principles and constraints.
			SOAP 
			- a fixed process.
			- Lots of docs up front.
			- Detailed scenarios.
			- Complex err handling.
			REST
			- Few requirments.
			- Docs discovered as you go 
			- Flexible, based on needs
			- Flexible based on patterns.
			 but above REST points brings ambiguty ...so we go back to HTTP.

			curl -I https://api.github.com 
			Response code
			Content-Type -- payload
			Media type -- structure of payload.
		6 constraint for HTTP APIs
			- Client-server architecture.
			- stateless architecture.
			- Cacheable. -- idempotent request.
			- Layered System. b/w client and servers.--DNS lookups.
			- Code on Demand.
			- Uniform interfces.
	Common Design challenges.
		Authentication and Authorisation:
			API Design pattrns -- AuthN and AuthZ.they are different
			AuthN -- who you are.
			AuthZ -- what you are allowed to do.
			Authorization can depend on :
				Who you are ?
				your group membership
				Subscription level
				Context -- time of day , loaction, device.
				Actions attempted (for MFA)
			Patterns for AutheN and AuthZ:
				API Keys. simplest.
					it can be cached everywhere.and can be compromised when key get rotated.
				Create your own AuthN/ AuthZ Protocol.
					benifits -- none.
					drawbacks -- untetsed , unproven, needs training, no supporting tools.
				OAuth 2.0-- authentication protocol.
					reliable and well established.
					massive documentation , tools etc ..
					complicated and not easy to implementation .
		API Versioning:
			- resource URL
			- Accept header.
			Using Accept header:-- proper
				content negotioation.
			Using the URL.-- easier.
				clear and explicit.
				nothing lost when forgets to include.
			regardless of either you need to be consistent.
		Content Types and Media Types:
			payload data ?
			Name/value Pairs are fine. -- complex data is harder to extrain.
			Media types:
				collection + JSON: designed to deal with groups or collections of resources.
									Also used for read/write operations and query about things.
				Hypertext Application language (HAL)-- hal+json:
					seperates the payload into 2 parts - data and _links.
					Can represent single items as a set of one.
					simple and effective.
					drawbacks:
						Can be verbose.
						Having metadata in _links seperate from data is odd -- easy to lose context and not explore as appropriate.
				Ion Hypernedia type.
					designed specifically for the key data.
					Metadata is grouped and easier to process and apply.
				Otehr Hypermedia type:
					Siren,OData, Atom,Mason,UBER,JSONAPI,JSON-LD.

		Hypermedia and Hypermedia approaches:
			hyper media -- hyper+media.
			API single entry point.

		HTTP headers - content negotioation and caching.
			a way of storing and retriving data so that future requests can retrive it faster without performing and operation(-calculation,n/w request etc..) again.
				Etags are comman approach for caching .
					client makes HEAD request and server returns the Etag if the data is unchanged.
					if the data is changed, then server returns new ETag .
					If ETag is changed , client makes the full request.
		Documentation approaches.
			don't use PDF.
			no CMS ....like wordpress..etc..
			Goals?
				we need code snippet friendly.
				need page history specifically user friendly.
				need something that easy to update.
				need to be searchable.-- google needs to be able to crawl it as well.
			Tools:
				Wikis - Mediawiki,confluence,etc
					Drawback - no stagins sapcec or no workflow.
				Jekyll ?
				Slate?- based on Jekyll and easy to deploy.
		SDK design considerations:
			if complex then only u want SDK
				S - Succinct.- prescie.
				P - Purposeful.
				O - Open source.- pass back extensions...
				I - Idiomatic.- SDKs should use the patters and conventions of any language they are designed for.
				L - Logical. - consistent so lesson learned patterns ...
			Chose language wisely.
======================================================================================================================================
API TESTING AND VALIDATION
	Guzzle,behat.
	Understand Behavior Testing with Gherkin.
		API testing is brokern - click around 
			unit tsting doesn't work
	    Goals of testing:
			Prove that it works now.
			Give us confidenc later.
		SMART - Specific,measurable,achivable,relevent, and timeboxed.
		INVEST - Independendt, negotiable,valuable,estimable,small adn testable.
		BDD. - working software 
		Gherkin Syntex:
			Given
			When
			Then
			And
		hands-on:
			php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
			php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
			php -r "unlink('composer-setup.php');"
			export no_proxy=.github.com,.getcomposer.org
			php composer.phar require behat/behat 3.*
			vendor/bin/behat -V

			vendor/bin/behat --init
			vendor/bin/behat - linux
			vendor\bin\phpunit - windows
			php composer.phar require guzzlehttp/guzzle 6.*
			composer config -g -- disable-tls true
			    i.e., C:\MAMP\conf\php\php7.2.10\php.ini) -- uncomment  -->  ;extension=php_openssl
			err while trying to access json -- 2nd scenario --> https://stackoverflow.com/questions/24611640/curl-60-ssl-certificate-problem-unable-to-get-local-issuer-certificate
			vendor\bin\behat --append-snippets --> https://stackoverflow.com/questions/30770257/behat-mink-error-snippets-for-the-following-steps-not-generated
    Handling Authentication in API testing:
        3 main approaches:
            usr/pass
            API keys/tokens-- should not embed the API keys on ur...use authorisation header
            OAuth 2.0: solid and reliable.Handles authentication outside the API exchange.
                    Retrives an access token and a refresh token.

        configuration - behat.yml. -> holds password and username
    Advanced API Testing in Practice:
        vendor\bin\behat features\repo-watch.feature --- to call out particular feature.
        HTTP response code:
            1xx,2xx,3xx,4xx,5xx
        Use extensions: batch operations
            creations of tables for entire batchs /watch repos in iterative mode

            GERKHIN SYNTAX - CROSS LANGUAGE
======================================================================================================================================
WEB SECURITY:OAUTH AND OPENID CONNECT
    Introduction:
        OIDC -> openID connect
        requird tools - postman , postman interceptor,Token Introspection tool once we get JWET,
        An OAuth Server.
            https://oauth2.thephpleague.com/
            https://developers.google.com/oauthplayground/
            https://www.oauth.com/playground/
        API access Management:
            https://developer.okta.com/
           php >7, node.js - 15v,jq tool- cli to manipulate json
    What is OAuth 2.0????
        OAuth - is not a password sharing mechanism / protocol , it is definitely not a login process.
        AuthN and AuthZ difference.
        OAuth 2.0 is an authorization framework , which means a lot of things are undefined on purpose.
        OpenID connect is an OAuth 2.0 extension putting function and form to a user's profile information.
        OpenID Connect is just a special case of Oauth 2.0 -> applied in facebook , linkedin and github etc..
        OAuth Extensions -Make it work
            JWT or JSON Web token
                - JWTs, common, JWTs are encode not encrypted.
                - Don't put the confidential information in JWTs
                - JSON Web /encryption(JWE) can be used to encrypt
                - includes iss(issuer),iat(issued at),sub (subject),aud (audience), and exp (expiration).
            Token revocation
                - RFC 7009 Token Revocation spec- Cancels a token via API.
                - this must be implemented in practice -> technically optional but recommended to implement.
            Token introspection
                - RFC 7662 Token Introspection spec
                - useful for opaque tokens
                - Describes if the token is active or not
                - Mandatory if you have token revocation
                - Clients needs to talk to server to check on token status.
            Dynamic client Registration
                - RFC 7591 Dynamic Client Registration spec
                - Defines a consistent API for creating OAuth clients
                - Useful in self-service API developer portals
                - Followed by RFC 7592 Dynamic client management
            Authorization server metadata discovery
        all the above stated spec are optional -> how do we know the capabilities we have available???
            Authorization server metadata discovery
                - RFC 8414 Authorization Server Metadata spec - OAuth discovery document
                - used for checking available specs
            OpenID Connect- OIDC
                - if we look carefully we can see that OIDC is just an extension to OAuth
                - Along with Access and refresh token from OAuth , OIDC adds another type of token -ID tokens which must be a JWTs and must have users profile information
                - Along with Authorize and token endpoints from OAuth , OIDC adds another endpoint called the UserInfo Endpoint- to retrieve user info.
                - OIDC - only supports the subset of OAuth grant types..- Authorization code
                - OIDC is an extension for profiling.
    Fundamental concepts
        OAuth 2.0 Fundamentals:
            Scopes are the permissions that a client can request -- access can be either granted or denied
            An access token represents your current authorization
            A refresh token represents your next authorization
            Grant types or flows are how you retrieve tokens
            4 Grant types:
                - Authorization code flow - back-ens apps
                - Implicit or authorization code with PKCE - mobile apps or SPAs --Java scripts
                - Client credential -- service accounts or microservices
                - Resource owner password -- for legacy apps
        OAuth 2.0 endpoints:
            The core specification RFC 6749 - 2 end points
                /authorize - used for anything user facing
                           - Gets the authorization grant and user consent
                /token - used to retrieve token when no user is involved
                       - The only endpoint used in resource owner password or client credential
            All other endpoints are extension!!
            Possible OAuth Endpoints:
                /introspect - which allows you to analyze and decode a token
                /revoke - allows you to invalidate and access a refreshed token
                /userinfo - this publishes user profile data
                /.well-known/oauth-authorization-server also known as OAuth Authorization server metadata document(metadata discovery documents)
                    - it is fixed and you are not allowed to create your own URL pattern
                    - documents list all end points
        OAuth 2.0 Scopes:- permissions for authorization
            - scopes are undefined - they should be unique strings
            - OpenID connect define few:
                - profile
                - email
                - phone
                - address
            - Scope Naming Schemes or patterns:
                - Simple strings Pattern - unique strings
                - Java-style namespaces : eg .. company.resource.action ..
                    when we use namespace we get expressive, Granular, predictable and lengthy scopes(for complex actions)
                - URL-style pattern: eg.. API.company.com/resource.action
                    this style has expressive, granular,Predictable --> google follow the URL pattern
            Scope Naming guidelines:
                - Be consistent
            NO "ADMIN" SCOPES - because it looks vague
    OAuth 2.0 tokens
        OAuth specific structure and content of an access tokens are not defined.
        refresh token
        Opaque Tokens - or Obfuscated token - just unique key - nothing to extract/decode or decrypt.
                      - Opaque tokens are useful only in the authorization server.
                      - Auth server uses it as database ID to retrieve additional relevant info.
        JSON Web Token - JWTs - full authorization and profile data  - we can use claims in out application to makes decision/grant/deny actione etc..
                       - We can use   different naming convention for the claims.
        How do we establish patterns and trust?
              - trust data getting from token
              - normalised data should be the o/p
        Validating JWTs:
               - very important in OAuth.
               - We can trust the token - upon validating it.
               - validate establishes to trust
               - steps to validate the tokens:- only for access and ID tokens
                    - Retrieve your signing keys.keys document
                    - Use periods to separate access token into header,payload and the signature.
                    - 3 parts
                    - header -decode form base 64
                   - The decoded header - grab claim from here called KID - keyID- which should reference a key from your original document.
                   - KID should reference a key from the original document - if they don't match , then reject the token and it is not for us.
                   - use the referenced key to sign the payload and compare against the original signature.
                   - if they don't match then the token has been tampered / or not for you so reject it immediately.
                   - now we know the token is right and it is for us and untouched:
                   - now, we need to look at 4 claims from the payload which is decoded.
                        - ISS - the issuer - should match our authorization server - we need to know where it came from.
                        - AUD - Audience claim - from payload should match authorization server. - who the token is destined for.
                        - CID - client ID - should match the client ID of the application that originally requested the token
                        - EXP - Expiration time - should be in the future only.
                   - if the token fails any of the above checks then it is invalid - reject the token.
                   - we can't have a partially-validated token.
                   - once above checks are completed we can consider token as valid.
                   - above steps can be used using any available libraries.
        Using access and refresh tokens:
            Access token - access to specific resources.
            Refresh token - opaque tokens - only 1 place it can be used in endpoint of authorization server
                protect refresh tokens
        Parsing and using ID tokens:
            OIDC - always JWTs - ID Tokens comes from openID connect - and not from OAuth itself.
            - ID tokens - have structured and defined.
            - profile scope
            - Email scope
            - Address scope
            - Phone scope
            OID specification
                OIDC Connect - Authentication and profile creation
        Handling tokens safely and securely : -- bcoz we are handling profiling information.
            ID tokens - user profile data- is should be protected -GDPR, delete info needs to be deleted
            Access token - Authorization data
                         - Read-only , low risk data : Long expiration
                         - Read-only , sensitive  data : short expiration
                         - Read write , sensitive data : very short expiration
            Refresh tokens - Retrieve a new access token- critical token
                           - to get new access token - etc
                           - secure by revoking refresh toekn ASAP
            Always need to protect tokens.
    Grant type - Authorization code :
        OAuth 2.0 Authorization code flow
            - user never sees credentials or Access / refresh tokens
            - and authorization code flow requires a client secret and user being involved.
        When should I use Authorization code flow
             can be used only when user is involved and application has a back end component.
             But for mobile apps and SPAs(single page APPS), we need something different.
        PKCE Overview:
            - single page app can't keep secret and same goes with mobile apps
            - so we have RFC 7636 - Proof key for code Exchange also called as PKCE
            - PKCE doesn't use the client secret , but has same flow as Authorization code flow.
            - instead of having a code secret , it has code verifier -  kept on local system.
            - code verifier - URL - of safe string with 43 characters
            - Then it also generates - Code challenge -- base64 encoded SHA256 hash of that code verifier
            - so when an authorization request is made , the application wll send code challenge and keep code verifier secret.
            - so for PKCE we can utilize OpenID foundation - AppAuth libraries- https://appauth.io/
        When should I use PKCE?
            when should I use Auth code with PKCE ?
                anytime you have applications that can't keep secrets:
                    mobile applications
                    Single-page web applications
                    Publica clients
                we can use PKCE with general Auth code
            Drawback of PKCE :
                no refresh tokens- can't store secrets, local code challenge
                we can implement using APPAuth libraries
        hands on how Auth code flow and Auth PKCE flow work.
            referring to following website: https://www.oauth.com/ - playground to understand
            Client Registration
            client_id	EdjaW1NXLY-N4GiEsnGX8YF2
            client_secret	XhMwjczT7tIsra-HJL3VfmozfUOiIohsRvwK28mWTc1DK6Yr
            User Account
            login	blue-tiger@example.com
            password	Clean-Ape-78

            Auth code is valid only for 60 seconds - should be used withi this
            https://jwt.io/
        Security considerations
            Secure OAuth coed and OAuth +PKCE
            Always use SSL/TLS
            validate your access tokens.
            Protect the Auth Code- only used once
            Don't worry about access token
            Protect your redirect_uri -> need to whitelist
            So overall Auth code is head to compromise
    Grant type: Implicit/Hybrid:
        Implicit flow:
            for single page/mobile apps
            this approach can be deprecated by Authorization code with PKCE
            Benefits:
                The application never sees the users credentials
                Mobile or browser app uses the underlying session storage so SSS scenarios work as expected.
            Drawbacks:
                The access token is exposed to the end-user and therefore at risk.
                This doesn't support refresh tokens
                So may ppl use implicit flow as the front-end single sign-on interface to back-end application which is actually using authorization code flow
                in practise it happens while they use to login into the page using facebook , google etc ..
        When should I use the Implicit grant type?
            bcoz deprecated
            hard to secure
            big problem is that the access tokens in URLs is risky , whcih can be sent to application via URL , or GET parameter.
            CORS - cross origin resource sharing !!!
            Only time you need to implement Implicit flow - Plan B is when you are developing on legacy code with inconsistent support, or OAuth provider doesn't support PKCE.
            Else PKCE with OAuth is advised.
        Build an Example:SPA
            https://console.cloud.google.com/apis/api/youtube.googleapis.com
            GoogleAuth.currentUser.get(); --to get current user
            GoogleAuth.currentUser.get().reloadAuthResponse(); -- to check out response, token ...etc,.
        Implicit flow security consideration
            Implicit flow is inherently insecure
            have to support it
            Always use SSL/TLS
            Must validate access token , before you use it.
            protect your redirect_uri
            Don't use GET at all
                2 ways to mitigate :
                    don't use authorization server which allows arbitrary redirects-> bcoz we get token in response
                    Use CORS --- very important
                    Use Auth code with PKCE
    Grant type: Resource owner password flow
        Overview:
            worst option- insecure.
            Drawbacks:
                The application has the user's credentials
                This doesn't support refresh tokens
        When should I use Resource owner password flow?
			almost never useit - last option...
			Pragmatism - > implement OAuth and legacy system.
			Resource owner password - connect OAuth and legacy.--old systetm
		Security consideration :
			Always use SSL/TLS
			token revocation is useless 
			so change passwords
			Resource owner should not be final system design -> should be intermittent while combining legacy applications.
	Grant type: Oauth:2.0 Client credential flow:
		Overview:
			it doesn't involve user.
			client id and secret - application credentials.
		When should we use it ?
			Microservices / backend APIs -- whne we don't use user info 
			Benifits of OAuth:
				Simplify with consistent interface.
				Credential rotation,scopes and better tools.
				less mistakes.
				Less components and implementation overall
				The client secret is a password - so we cannot use this in mobile app or other application running outside.
		Security considerations:
			use ssl/tls.
			validate access token
			Log and track usage in other ways 
			secure grant type ----yes
	Grant type :Device grant type
		Overview:
			new one.
			RFC 2689.
			OAuth 2.0 framework
			addressing Iot devices....
		When should we use it ?
			never used for mobile devvice /IOT 
			4 requirments:
				device must be connected to internet.
				device can make HTTPs requests.
				device can communicate a URI to the end user to authorise and authenticate.
				the user has a device available to visit the URI.
		Security considerations:
			use TLS/SSL.
			validate access token -- cant do on device --- delegate to api gateway.
			USER CODE -- can be compromised if its small, 
				mitigate -with URL Parameters.--pass with url parameter as usercode --so user will not be able to type a thing.
				we cn implemwnt rate limiting - authorisation server.
				don't trust devices.
	Using an OAuth Architecture:
		OAuth recommended practices:
			use SSL/TLS.
			Resource server should validate every token it receives and maintain expiration time.
			how to validate access token ?
			often validate and authorisation server check.
			API gateway - recommended. azure ,aws,kong,apigee,mulesofy...
			OAuth authorisatoin server: OKTA...
			Client application - hardest thing to secure.---choose right grant type 
			OAUTH with PKCE.
			secure the tokens - hide from end user.
		Configuring an OAut server in PHP:
			cmds from readme
		Configuring an OAUTH server in Nodejs.
			cmds from readme
		OKTA -OAuth as a service product.
	OAuth extensions in industries
		Do u support OAuth2.0?
		with grant and spec according to usecase.
	HEART implementatation - health records
	Open banking - APIs.
		phase 1 : read only APIs.
		phase 2: read and write 
		All financial institution.
			controlling - authorisation.
	Next steps :
	oauth.com
	OAuth2.0 simplified by Aaron
	Don't build authentication server yourselves.
	check out OAuth maps.
	understnad the requirements.